fun read() : Int import
fun write(a : Int) : Unit import

struct SegmentTree2D
{
    n : Int;
    values : [SegmentTree1D];
}

struct SegmentTree1D
{
    n : Int;
    values : [Int];
}

fun update(tree : SegmentTree1D, pos : Int, value : Int) : Unit
{
    var values : [Int] = tree.values;
    values[pos += tree.n] += value;
    pos /= 2;
    
    while pos > 0
    {
        values[pos] = values[2 * pos] + values[2 * pos + 1];
        pos /= 2;
    };
}

fun getSum(tree : SegmentTree1D, l : Int, r : Int) : Int
{
    var values : [Int] = tree.values;
    l += tree.n;
    r += tree.n;
    
    var sum : Int;
    
    while l <= r
    {
        if l % 2 == 1 then
        {
            sum += values[l];
        };
        
        if r % 2 == 0 then
        {
            sum += values[r];
        };
        
        l = (l + 1) / 2;
        r = (r - 1) / 2;
    };
    
    return sum;
}

fun update(tree : SegmentTree2D, x : Int, y : Int, value : Int) : Unit
{
    var trees : [SegmentTree1D] = tree.values;
    x += tree.n;
    
    while x > 0
    {
        update(trees[x], y, value);
        x /= 2;
    };
}

fun getSum(tree : SegmentTree2D, lx : Int, rx : Int, ly : Int, ry : Int) : Int
{
    var trees : [SegmentTree1D] = tree.values;
    lx += tree.n;
    rx += tree.n;
    
    var sum : Int;
    
    while lx <= rx
    {
        if lx % 2 == 1 then
        {
            sum += getSum(trees[lx], ly, ry);
        };
        
        if rx % 2 == 0 then
        {
            sum += getSum(trees[rx], ly, ry);
        };
        
        lx = (lx + 1) / 2;
        rx = (rx - 1) / 2;
    };
    
    return sum;
}

fun init1D(n : Int) : SegmentTree1D
{
    var i : Int = 0;
    var result : SegmentTree1D = new (SegmentTree1D);
    result.n = n;
    result.values = new (Int, 2 * n);
    
    while i < 2 * n
    {
        result.values[i] = 0;
        i += 1;
    };
    
    return result;
}

fun init2D(n : Int, m : Int) : SegmentTree2D
{
    var i : Int = 0;
    var result : SegmentTree2D = new (SegmentTree2D);
    
    result.n = n;
    result.values = new (SegmentTree1D, 2 * n);
    
    while i < 2 * n
    {
        result.values[i] = init1D(m);
        i += 1;
    };
    
    return result;
}

fun kju() : Unit
{
    var n : Int = read();
    var m : Int = read();
    
    var tree : SegmentTree2D = init2D(n, m);
    
    var i : Int;

    while i < n
    {
        var j : Int;
        while j < m
        {
            var value : Int = read();
            update(tree, i, j, value);
            j += 1;
        };
        
        i += 1;
    };
    
    var q : Int = read();
    
    i = 0;
    
    while i < q
    {
        var type : Int = read();
        
        if type == 0 then
        {
            var x : Int = read();
            var y : Int = read();
            var value : Int = read();
            
            update(tree, x, y, value);
        }
        else
        {
            var l : Int = read();
            var r : Int = read();
            var x : Int = read();
            var y : Int = read();
            
            write(getSum(tree, l, x, r, y));
        };
        
        i += 1;
    };
}