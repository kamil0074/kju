fun write(a: Int): Unit import


fun searchInOdd(value: Int): Int {
    /* find first number in [a1 <= a2 <= ... <= a31] which is at least x */
    fun search(
        a01: Int, a02: Int, a03: Int, a04: Int, a05: Int, a06: Int, a07: Int, a08: Int,
        a09: Int, a10: Int, a11: Int, a12: Int, a13: Int, a14: Int, a15: Int, a16: Int,
        a17: Int, a18: Int, a19: Int, a20: Int, a21: Int, a22: Int, a23: Int, a24: Int,
        a25: Int, a26: Int, a27: Int, a28: Int, a29: Int, a30: Int, a31: Int, x: Int): Int {

        /*
            functions below use the threshold from the outer scope,
            and return either the index of the argument that is equal to x,
            or -1 if x is not found
        */

        fun search1(a01: Int): Int {
            if (a01 == x) then {
                return 1;
            } else {
                return -1;
            };
        };

        fun search3(a01: Int, a02: Int, a03: Int): Int {
            if (a02 > x) then {
                return search1(a03);
            } else {
                if (a02 == x) then {
                    return 2;
                } else {
                    return search1(a01);
                };
            };
        };

        fun search15(
            a01: Int, a02: Int, a03: Int, a04: Int, a05: Int, a06: Int, a07: Int, a08: Int,
            a09: Int, a10: Int, a11: Int, a12: Int, a13: Int, a14: Int, a15: Int): Int {

            if (a04 > x) then {
                return search3(a01, a02, a03);
            } else {
                if (a04 == x) then {
                    /* found */
                    return 4;
                } else {
                    if (a08 > x) then {
                        return 4 + search3(a05, a06, a07);
                    } else {
                        if (a08 == x) then {
                            /* found */
                            return 8;
                        } else {
                            if (a12 > x) then {
                                return 8 + search3(a09, a10, a11);
                            } else {
                                if (a12 == x) then {
                                    /* found */
                                    return 12;
                                } else {
                                    return 12 + search3(a13, a14, a15);
                                };
                            };
                        };
                    };
                };
            };
        };

        fun search31(
            a01: Int, a02: Int, a03: Int, a04: Int, a05: Int, a06: Int, a07: Int, a08: Int,
            a09: Int, a10: Int, a11: Int, a12: Int, a13: Int, a14: Int, a15: Int, a16: Int,
            a17: Int, a18: Int, a19: Int, a20: Int, a21: Int, a22: Int, a23: Int, a24: Int,
            a25: Int, a26: Int, a27: Int, a28: Int, a29: Int, a30: Int, a31: Int): Int {

            if (a16 < x) then {
                return 15 + search15(a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, a31);
            } else {
                if (a16 > x) then {
                    return search15(a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15);
                } else {
                    /* found */
                    return 16;
                };
            };
        };

        return search31(
            a01, a02, a03, a04, a05, a06, a07, a08,
            a09, a10, a11, a12, a13, a14, a15, a16,
            a17, a18, a19, a20, a21, a22, a23, a24,
            a25, a26, a27, a28, a29, a30, a31);
    };

    return search(
        1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, value
    );
}

fun kju(): Unit
{
    var x: Int = 1;

    /* Expected output: 1 -1 2 -1 3 -1 4 -1 ... -1 31 -1 */
    while (x <= 62) {
        write(searchInOdd(x));
        x += 1;
    };
}
